@inject IJSRuntime JSRuntime
@inject LobbyConnection LobbyConnection

<div id="board-area">
    <canvas id="myCanvas" style="border: 2px solid black"></canvas>
    <div id="canvasOverlay"></div>
</div>

@code {

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var dotNetReference = DotNetObjectReference.Create(this);
            JSRuntime.InvokeVoidAsync("initThis", dotNetReference);
            LobbyConnection.DrawReceived += ReceiveDraw;
            LobbyConnection.StateChanged += Update;
        }
        return base.OnAfterRenderAsync(firstRender);
    }

    private async void Update(object sender, EventArgs e)
    {
        StateHasChanged();
        await Task.Delay(50);
        StateHasChanged();
    }

    [JSInvokable]
    public async Task SendDraw(float x, float y, bool isDraw, string color, float width)
    {
        var drawDetails = new DrawDetails(x, y, isDraw, color, width);
        await LobbyConnection.SendDraw(drawDetails);
    }

    public void ReceiveDraw(object sender, DrawDetails drawDetails)
    {
        JSRuntime.InvokeVoidAsync("drawFromOutside", drawDetails.X, drawDetails.Y, drawDetails.IsDown, drawDetails.Color, drawDetails.Size);
    }
}