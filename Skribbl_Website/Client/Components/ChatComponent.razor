@inject MessagesContainer MessagesContainer
@inject IJSRuntime Js

<div class="lobby__chat d-flex flex-column">
    <div id="chat-scroller" class="chat__messages d-flex flex-column">
        @foreach (var message in MessagesContainer.Messages)
        {
            <MessageComponent Message="message"></MessageComponent>
        }
    </div>
    <div class="chat__input-container d-flex flex-row">
        <input @bind="_newMessageContent" type="text" class="chat__input" @onkeyup="CheckForSubmitKey" placeholder="Type your guess here..." />
        <button @onclick="SendMessage">Send!</button>
    </div>
</div>

@code {
    [Parameter] public LobbyConnection LobbyConnection { get; set; }

    private string _newMessageContent;

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
            await Js.InvokeVoidAsync("setupChat","chat-scroller");
    }

    public async Task SendMessage()
    {
        await LobbyConnection.Send(_newMessageContent);
        _newMessageContent = string.Empty;
    }

    public async Task CheckForSubmitKey(KeyboardEventArgs eventArgs)
    {
        if (eventArgs.Key == "Enter")
        {
            await SendMessage();
        }
    }
}