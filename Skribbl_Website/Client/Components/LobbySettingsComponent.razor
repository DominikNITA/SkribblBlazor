@inject LobbyConnection LobbyConnection

<h1>Blazor Skribbl</h1>

@if (IsHost)
{
    <p>Prepare the game using following settings:</p>
    <EditForm Model="LobbySettings" OnValidSubmit="OnValuesChanged" class="mt-3">
        <div class="rounds-input d-flex flex-row">
            <span class="rounds-input--title">Rounds:</span>
            <div class="rounds-input--radios radios d-flex flex-row">
                @foreach (var roundLimit in LobbySettings.PossibleRoundsLimit)
                {
                    <label>
                        <InputRadioCustom name="round" SelectedValue="@roundLimit" @bind-Value="LobbySettings.RoundsLimit" @onclick="OnValuesChanged" IsDisabled="@false" />
                        <span>@roundLimit</span>
                    </label>
                }
            </div>
        </div>
        <div class="time-input d-flex flex-row">
            <span class="time-input--title">Time:</span>
            <div class="time-input--radios radios d-flex flex-row">
                @foreach (var timeLimit in LobbySettings.PossibleTimeLimit)
                {
                    <label>
                        <InputRadioCustom name="time" SelectedValue="timeLimit" @bind-Value="LobbySettings.TimeLimit" @onclick="OnValuesChanged" IsDisabled="@false" />
                        <span>@timeLimit</span>
                    </label>
                }
            </div>
        </div>
    </EditForm>
    <button class="start-button mt-2" @onclick="LobbyConnection.StartGame"> Start Game!</button>
}
else
{
    <p>Current game settings settings:</p>
    <div>
        <span class="rounds-input--title">Rounds: </span>
        <span class="setting-display">@LobbySettings.RoundsLimit</span>
    </div>
    <div>
        <span class="time-input--title">Time: </span>
        <span class="setting-display">@LobbySettings.TimeLimit</span>
    </div>
}




@code {
    [Parameter] public LobbySettings LobbySettings { get; set; }
    [Parameter] public bool IsHost { get; set; }

    async Task OnValuesChanged()
    {
        await Task.Delay(50);
        await LobbyConnection.UpdateLobbySettings();
    }
}