@page "/lobby/{lobbyId}"
@inject NavigationManager NavigationManager
@inject UserState UserState
@inject LobbyConnection LobbyConnection


@if (LobbyConnection.Lobby != null)
{
    <InviteDisplay InviteLink="@NavigationManager.ToAbsoluteUri("join/" + LobbyConnection.Lobby.InviteLink).ToString()"></InviteDisplay>

    <div class="lobby d-flex flex-column">
        <TopBarComponent></TopBarComponent>

        <div class="lobby__content d-flex flex-row">
            @if (LobbyConnection.Lobby.Players != null)
            {
                <PlayersListComponent Players="LobbyConnection.Lobby.Players" UserIsHost="LobbyConnection.UserIsHost">
                </PlayersListComponent>
            }
            <div class="lobby__playing-area d-flex flex-column">
                <PlayingAreaComponent></PlayingAreaComponent>
            </div>
            <ChatComponent LobbyConnection="@LobbyConnection">
            </ChatComponent>
        </div>
    </div>
    <span id="customCursor"></span>
}

@if (!string.IsNullOrEmpty(_info))
{
    <div class="alert alert-danger">@_info</div>
}

<button class="leave-button mt-2" @onclick="LeaveLobby">Leave!</button>


@code {

    [Parameter] public string LobbyId { get; set; }

    private Player _user = new Player();
    private string _info = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _user = await UserState.GetUser();
            Console.WriteLine(_user.IsHost);
        }
        catch (UserNotInLocalStorageException exception)
        {
            _info = exception.Message;
        }

        LobbyConnection.StateChanged += Update;
        LobbyConnection.ErrorOccured += RedirectToErrorPage;
        LobbyConnection.UserBanned += RedirectToKickedPage;
        await LobbyConnection.StartConnection(_user, NavigationManager.ToAbsoluteUri("/lobbyHub"), LobbyId);

        await base.OnInitializedAsync();
    }

    private async void Update(object sender, EventArgs e)
    {
        StateHasChanged();
        await Task.Delay(50);
        StateHasChanged();
    }

    private void RedirectToErrorPage(object sender, EventArgs e)
    {
        Console.WriteLine("Error occured in LobbyConnection");
        NavigationManager.NavigateTo("");
    }

    private void RedirectToKickedPage(object sender, string username)
    {
        NavigationManager.NavigateTo("kicked/" + username);
    }

    private void LeaveLobby()
    {
        //TODO: Show dialog
        LobbyConnection.CloseConnection();
        NavigationManager.NavigateTo("");
    }

}