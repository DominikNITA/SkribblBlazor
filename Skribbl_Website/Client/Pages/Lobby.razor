@page "/lobby/{lobbyId}"
@using Microsoft.AspNetCore.SignalR.Client
@inject LocalStorage LocalStorage
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject UserState UserState

@LobbyId

@if (_lobby != null)
{
    <span>
        Invite: @_lobby.InviteLink
    </span>
}

<div>
    Name: @_user.Name
</div>
<div>
    Id: @_user.Id
</div>

@if (!string.IsNullOrEmpty(_info))
{
    <div class="alert alert-danger">@_info</div>
}

<ChatComponent Messages="_messages"></ChatComponent>

@code {
    [Parameter]
    public string LobbyId { get; set; }

    private UserDto _user = new UserDto();
    private string _info = string.Empty;
    private LobbyDto _lobby;
    //Create special class
    private List<Message> _messages = new List<Message>();

    private HubConnection _hubConnection;

    protected async override Task OnInitializedAsync()
    {
        //TODO: Retrieve User instance instead of particular members
        //TODO: Create singleton for state storage
        try
        {
            _user = await UserState.GetUser();
        }
        catch (UserNotInLocalStorageException exception)
        {
            _info = exception.Message;
        }

        //TODO: Separate to other classes
        //Retrieve initial Lobby state
        string query = String.Format("lobbies/{0}/{1}", LobbyId, _user.Id);
        //Console.WriteLine(query);
        _lobby = await Http.GetJsonAsync<LobbyDto>(query);

        //Connect to SignalRHub
        //TODO: Create Singleton
        _hubConnection = new HubConnectionBuilder().WithUrl(NavigationManager.ToAbsoluteUri("/lobbyHub"), options =>
        {
            options.Headers.Add("User", _user.Id);
            options.Headers.Add("Lobby", LobbyId);
        }
            ).Build();

        _hubConnection.On<LobbyDto>("ReceiveLobbyState", (lobby) =>
        {
           _lobby = lobby;
           StateHasChanged();
        });

        _hubConnection.On<PlayerDto>("AddPlayer", (player) =>
        {
            _lobby.Players.Add(player);
            StateHasChanged();
        });

        _hubConnection.On<Message>("ReceiveMessage", (message) =>
        {
            _messages.Add(message);
            Console.WriteLine(_messages.Count);
            StateHasChanged();
        });

        await _hubConnection.StartAsync();

        await Join();

        await base.OnInitializedAsync();
    }

    public bool IsConnected =>
        _hubConnection.State == HubConnectionState.Connected;

    Task Send() =>
    _hubConnection.SendAsync("SendMessage", _user.Name, "Hello from SEND");

    Task Join() =>
    _hubConnection.SendAsync("AddToGroup", _user.Id, LobbyId);
}
