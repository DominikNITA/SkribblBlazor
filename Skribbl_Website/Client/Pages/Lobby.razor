@page "/lobby/{lobbyId}"
@inject NavigationManager NavigationManager
@inject UserState UserState
@inject LobbyConnection LobbyConnection

@using Skribbl_Website.Client.Components


@if (LobbyConnection.Lobby != null)
{
    <div>
        Invite:   @NavigationManager.ToAbsoluteUri("join/" + LobbyConnection.Lobby.InviteLink)
    </div>

    <div class="lobby d-flex flex-column">
        <TopBarComponent></TopBarComponent>

        <div class="lobby__content d-flex flex-row">
            @if (LobbyConnection.Lobby.Players != null)
            {
                <PlayersListComponent Players="LobbyConnection.Lobby.Players" UserIsHost="LobbyConnection.UserIsHost">
                </PlayersListComponent>
            }
            <div class="lobby__drawing-area d-flex flex-column">
                @if (LobbyConnection.Lobby.State == LobbyState.Preparing)
                {
                    <LobbySettingsComponent LobbySettings="LobbyConnection.Lobby.LobbySettings" IsHost="LobbyConnection.UserIsHost"></LobbySettingsComponent>
                    <button class="start-button mt-2" @onclick="LobbyConnection.StartGame"> Start Game!</button>
                }
                else if (LobbyConnection.Lobby.State == LobbyState.Drawing)
                {
                    <Board></Board>
                    <ToolbarComponent></ToolbarComponent>
                }
                else if (LobbyConnection.Lobby.State == LobbyState.Choosing)
                {
                    <SelectWordComponent Words="LobbyConnection.Lobby.WordsToChoose"></SelectWordComponent>
                }
                else if (LobbyConnection.Lobby.State == LobbyState.Started)
                {
                    <h3>Game starts in a moment</h3>
                }
                else if(LobbyConnection.Lobby.State == LobbyState.Ended)
                {
                    <h3>Game finished!</h3>
                    <div class="p-2 border border-primary">
                        @LobbyConnection.Lobby.Players.First(player => player.Score == LobbyConnection.Lobby.Players.Max(player => player.Score)) won!
                    </div>
                }
                else if( LobbyConnection.Lobby.State == LobbyState.Completed)
                {
                    <h3>Points won this turn:</h3>
                    <div class="scores mt-2 d-flex flex-column">
                        @foreach (var score in LobbyConnection.Lobby.ScoresToUpdate)
                        {
                            <div class="score d-flex flex-row justify-content-between">
                                <span>@score.PlayerName : </span>
                                <span>@score.ScoreToAdd</span>
                            </div>
                        }
                    </div>
                }
            </div>
            @if (LobbyConnection.Messages != null)
            {
                <ChatComponent Messages="@LobbyConnection.Messages"
                               LobbyConnection="@LobbyConnection"></ChatComponent>
            }
        </div>
    </div>
    <span id="customCursor"></span>
}

@if (!string.IsNullOrEmpty(_info))
{
    <div class="alert alert-danger">@_info</div>
}

<button class="leave-button mt-2" @onclick="LeaveLobby">Leave!</button>


@code {
    [Parameter]
    public string LobbyId { get; set; }

    private Player _user = new Player();
    private string _info = string.Empty;

    protected async override Task OnInitializedAsync()
    {
        try
        {
            _user = await UserState.GetUser();
            Console.WriteLine(_user.IsHost);
        }
        catch (UserNotInLocalStorageException exception)
        {
            _info = exception.Message;
        }

        LobbyConnection.StateChanged += Update;
        LobbyConnection.ErrorOccured += RedirectToErrorPage;
        LobbyConnection.UserBanned += RedirectToKickedPage;
        await LobbyConnection.StartConnection(_user, NavigationManager.ToAbsoluteUri("/lobbyHub"), LobbyId);

        await base.OnInitializedAsync();
    }

    private async void Update(object sender, EventArgs e)
    {
        StateHasChanged();
        await Task.Delay(50);
        StateHasChanged();
    }

    private void RedirectToErrorPage(object sender, EventArgs e)
    {
        Console.WriteLine("Error occured in LobbyConnection");
        NavigationManager.NavigateTo("");
    }

    private void RedirectToKickedPage(object sender, string username)
    {
        NavigationManager.NavigateTo("kicked/" + username);
    }

    private void LeaveLobby()
    {
        //TODO: Show dialog
        LobbyConnection.CloseConnection();
        NavigationManager.NavigateTo("");
    }
}
