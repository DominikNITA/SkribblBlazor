@page "/lobby/{lobbyId}"
@inject LocalStorage LocalStorage
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject UserState UserState
@inject LobbyConnection LobbyConnection

@using Skribbl_Website.Client.Components


Lobby ID: @LobbyId

@if (LobbyConnection.Lobby != null)
{
    <div>LobbyDto ID: @LobbyConnection.Lobby.Id</div>
    <div>
        Invite:   @NavigationManager.ToAbsoluteUri("join/" + LobbyConnection.Lobby.InviteLink)
    </div>
    @if (LobbyConnection.Lobby.Players != null)
    {
        foreach (var player in LobbyConnection.Lobby.Players)
        {
            <div>
                @player.Name
            </div>
        }
    }
}

<div>
    Name: @_user.Name
</div>
<div>
    Id: @_user.Id
</div>

@if (!string.IsNullOrEmpty(_info))
{
    <div class="alert alert-danger">@_info</div>
}

@if (LobbyConnection.Messages != null)
{
    <ChatComponent Messages="@LobbyConnection.Messages"></ChatComponent>
}

<button @onclick="LeaveLobby">Leave!</button>


@code {
    [Parameter]
    public string LobbyId { get; set; }

    private Player _user = new Player();
    private string _info = string.Empty;

    protected async override Task OnInitializedAsync()
    {
        try
        {
            _user = await UserState.GetUser();
            Console.WriteLine(_user.IsHost);
        }
        catch (UserNotInLocalStorageException exception)
        {
            _info = exception.Message;
        }

        LobbyConnection.StateChanged += Update;
        LobbyConnection.ErrorOccured += RedirectToErrorPage;
        await LobbyConnection.StartConnection(_user, NavigationManager.ToAbsoluteUri("/lobbyHub"), LobbyId);

        await base.OnInitializedAsync();
    }

    private async void Update(object sender, EventArgs e)
    {
        StateHasChanged();
        await Task.Delay(50);
        StateHasChanged();
    }

    private void RedirectToErrorPage(object sender, EventArgs e)
    {
        Console.WriteLine("Eror occured in LobbyConnection");
        //NavigationManager.NavigateTo("");
    }

    private void LeaveLobby()
    {
        //TODO: Show dialog
        LobbyConnection.CloseConnection();
        NavigationManager.NavigateTo("");
    }

    //public bool IsConnected =>
    //    _hubConnection.State == HubConnectionState.Connected;
}
